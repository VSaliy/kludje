/*Generated file; do not edit*/
package ${pack};

/**
 * A functional interface for handling checked exceptions.
 * See parent type for intent.
 *
 * {@code ${parentSig}} invokes {@code ${functionSignature}}
 * and throws anything thrown by {@code ${functionSignature}}.
 *
 * Method {@code public static ${generics} ${simpleName}${parentGenerics} as${simpleName}(${simpleName}${parentGenerics} t)}
 * provides a convenience method for manufacturing types as an alternative to casting.
 */
@java.lang.FunctionalInterface
@javax.annotation.Generated("${generator}")
@SuppressWarnings("javadoc")
public interface ${simpleName}${generics} extends ${parent}${parentGenerics} {

      ${parentSigGenerics} default ${parentSig} {
        try {
          ${invocation};
        } catch (Throwable throwable) {
          throw uk.kludje.Exceptions.throwChecked(throwable);
        }
      }

      ${functionSignature} throws Throwable;

      public static ${generics} ${simpleName}${parentGenerics} as${simpleName}(${simpleName}${parentGenerics} t) {
        return t;
      }
}
