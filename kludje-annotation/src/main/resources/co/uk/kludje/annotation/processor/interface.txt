/*Generated file; do not edit*/
package ${pack};

/**
 * A functional interface for handling checked exceptions.
 * This type defines a two methods:
 * <ul>
 * <li>X: A default implementation of the parent's functional method {@code ${parentSig}}.</li>
 * <li>Y: A functional method {@code ${functionSignature}} that can throw any checked exception.</li>
 * </ul>
 * Rules:
 * <ul>
 * <li>Y invokes X.</li>
 * <li>Implementations must implement Y.</li>
 * <li>Implementations should not implement X.</li>
 * <li>Any exception thrown by Y is thrown by X even if it is a checked exception.</li>
 * <li>This type should not be used in method signatures - use ${parent} instead.</li>
 * </ul>
 */
@java.lang.FunctionalInterface
@javax.annotation.Generated("${generator}")
public interface ${simpleName}${generics} extends ${parent}${parentGenerics} {

      ${parentSigGenerics} default ${parentSig} {
        try {
          ${invocation};
        } catch (Throwable throwable) {
          co.uk.kludje.Exceptions.throwChecked(throwable);
          throw new AssertionError();
        }
      }

      ${functionSignature} throws Throwable;
}
